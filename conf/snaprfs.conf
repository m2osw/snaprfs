# snaprfs configuration
#
# The file is a basic list of `name = value` variables
# Comments start with a # character, must be the first character after spaces
# Empty lines are ignored


# listen=rfs://<ip>:<port>
#
# The IP address and port to a TCP socket to be created to listen for data
# connections.
#
# This connection only supports the 'rfs' protocol. This is an unencrypted
# protocol so it should only be used between computers on the same cluster
# (i.e. on a LAN).
#
# Default: rfs://127.0.0.1:4044
listen=rfs://127.0.0.1:4044


# secure_listen=rfss://<login>:<password>@<ip>:<port>
#
# The IP address and port to a TCP socket to be created to listen for
# secure data connections. This specific connection uses a certificate
# and a private key for encryption.
#
# This connection is opened only if the certificate and private_key
# parameters are also defined. By default, it is not set (no defaults)
# and thus no secure connection is available.
#
# WARNING: since this URI includes a password, it must be defined in a
#          secure file; the package automatically creates a file with
#          the correct permissions and ownership (0700 / snaprfs:snaprfs);
#          see /etc/snaprfs/snaprfs.d/35-snaprfs.conf
#
# Default: <undefined>
#secure_listen=rfs://admin:password1@127.0.0.1:4045


# certificate=<full path to PEM file>
#
# If a certificate (and private key) is defined, then the snaprfs
# remote connections are done over SSL. Note that SSL really means
# it is encrypted. At time of writing, we only allow TLS v1.2
# connections and no SSL v2 or v3.
#
# Default: /etc/snaprfs/keys/communicatord.crt
certificate=/etc/snaprfs/keys/communicatord.crt


# private_key=<full path to PEM file>
#
# If a private key (and certificate) is defined, then the snaprfs
# remote connections are done over an encrypted connection.
#
# Default: /etc/snaprfs/keys/communicatord.key
private_key=/etc/snaprfs/keys/communicatord.key


# communicatord_listen=cd://<ip>:<port> | cd:///<path>
#
# The IP address and port or a Unix path to a socket of the communicator
# daemon used to interconnect.
#
# The snaprfs daemon connects to the communicator daemon using this
# information. Once connected, all the other services can access the
# snaprfs daemon via their own local communicator daemon connection.
#
# Default: cd:///run/communicatord/communicatord.sock
communicatord_listen=cd:///run/communicatord/communicatord.sock


# watch_dirs=<path>:<path>:...
#
# The list of paths to watch directories used to listen for file changes
# and sharing.
#
# The default is defined internally and is likely sufficient for most
# installations although some systems may prefer to use different
# settings by updating this file.
#
# Default: /usr/share/snaprfs/watch-dirs:/var/lib/snaprfs/watch-dirs
#watch_dirs=/usr/share/snaprfs/watch-dirs:/var/lib/snaprfs/watch-dirs


# transfer_after_sec=<seconds>
#
# When a file is opened and modified, but not closed, the change lingers
# and would never get transferred if it wasn't for this parameter. This
# tells snaprfs to transfer the file after this many <seconds> whether it
# was closed or not.
#
# Internall, the snaprfs makes sure that this parameter is at least 3
# seconds. The transfer will start within 1 second of the calculated time.
#
# TODO: note that if the file is updated once one or two seconds and this
#       parameter is 3 or more, then the file never gets transferred. We'll
#       see whether we need to have a maximum wait and transfer anyway or
#       whether the current method is sufficient for us.
#
# Default: 10
#transfer_after_sec=10


# temp_dirs=<path>:<path>:...
#
# A list of paths were temporary files are saved. When a file is being
# transferred it gets saved in one of these temporary directories. Once
# the file transfer is complete, the temporary file get copied to its final
# destination at once (the rename(2) function is atomic).
#
# This list defines folders where temporary files can be saved. The reason
# for supporting multiple temporary directories is to support any mount
# point. Files on one specific physical disk get renamed "instantaneously"
# and atomically by moving the inode reference in the source and destination
# directories atomically. When not on the same physical drive, a copy of
# the file happens between the two disks, which is not atomic.
#
# The watch_dir configuration files should specify which path to use. If
# not specified, then the snaprfs service attempts to determine the correct
# path on its own using existing mount points. If that fails, the first
# <path> is used.
#
# A temporary path defined in a `watch_dirs` configuration file must exist
# in this list to be considered.
#
# Default: /var/lib/snaprfs/tmp
#temp_dirs=/var/lib/snaprfs/tmp


# vim: wrap
